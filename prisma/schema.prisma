// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_DIRECT_URL")
}

enum Role {
    FREEUSER
    PREMIUMUSER
    ADMIN
    SUPERADMIN
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    savedSnippets   SavedSnippets[]
    role            Role      @default(FREEUSER)
    searchQuota     Int       @default(3) //Need to refresh daily. Consider using AWS Lambda. Update to 40 if PREMIUMUSER.
    generateQuota   Int       @default(5) //Update to 20 and refresh daily if PREMIUMUSER. Consider using AWS Lambda.
    bookmarkQuota   Int       @default(5) //Need to refresh daily. Consider using AWS Lambda. 100 if PREMIUMUSER.
    //noteQuota needs to be calculated on client-side, based on the note count on that specific snippetId. Unlimited if PREMIUMUSER.
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model SurahMetadata {
    id          String  @id @unique
    surahNumber Int
    surahName   String
    surahTName  String
    surahEName  String
    surahType   String
}

model Verses {
    id                  String  @id @unique
    verseText           String
    verseTranslation    String?
    verseNumber         String
    surahNumber         String
}

//One-to-many, Users-SavedSnippets
//We are not relating directly to Verses to avoid a many-to-many relationship
model SavedSnippets {
    id                  String  @id @default(cuid())
    userId              String   
    user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    verseId             String
    userNotes           UserNotes[]
}

//Many-to-one, UserNotes-SavedSnippets
//If a SavedSnippets row gets deleted, all related UserNotes are deleted
model UserNotes {
    id                  String @id @default(cuid())
    snippetId           String
    savedSnippets       SavedSnippets @relation(fields: [snippetId], references: [id], onDelete: Cascade)
    content             String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
